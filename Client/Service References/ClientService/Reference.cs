//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ClientService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DBService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int Coinsk__BackingFieldField;
        
        private long IDk__BackingFieldField;
        
        private string Logink__BackingFieldField;
        
        private string Namek__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Coins>k__BackingField", IsRequired=true)]
        public int Coinsk__BackingField {
            get {
                return this.Coinsk__BackingFieldField;
            }
            set {
                if ((this.Coinsk__BackingFieldField.Equals(value) != true)) {
                    this.Coinsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Coinsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ID>k__BackingField", IsRequired=true)]
        public long IDk__BackingField {
            get {
                return this.IDk__BackingFieldField;
            }
            set {
                if ((this.IDk__BackingFieldField.Equals(value) != true)) {
                    this.IDk__BackingFieldField = value;
                    this.RaisePropertyChanged("IDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Login>k__BackingField", IsRequired=true)]
        public string Logink__BackingField {
            get {
                return this.Logink__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Logink__BackingFieldField, value) != true)) {
                    this.Logink__BackingFieldField = value;
                    this.RaisePropertyChanged("Logink__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Name>k__BackingField", IsRequired=true)]
        public string Namek__BackingField {
            get {
                return this.Namek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Namek__BackingFieldField, value) != true)) {
                    this.Namek__BackingFieldField = value;
                    this.RaisePropertyChanged("Namek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Crossword", Namespace="http://schemas.datacontract.org/2004/07/DBService")]
    [System.SerializableAttribute()]
    public partial class Crossword : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private long IDk__BackingFieldField;
        
        private string Namek__BackingFieldField;
        
        private long OwnerIDk__BackingFieldField;
        
        private string OwnerLogink__BackingFieldField;
        
        private double Rathingk__BackingFieldField;
        
        private string Themek__BackingFieldField;
        
        private Client.ClientService.QuestionAnswer[] questionsk__BackingFieldField;
        
        private Client.ClientService.Crossword.ThemeE themeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ID>k__BackingField", IsRequired=true)]
        public long IDk__BackingField {
            get {
                return this.IDk__BackingFieldField;
            }
            set {
                if ((this.IDk__BackingFieldField.Equals(value) != true)) {
                    this.IDk__BackingFieldField = value;
                    this.RaisePropertyChanged("IDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Name>k__BackingField", IsRequired=true)]
        public string Namek__BackingField {
            get {
                return this.Namek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Namek__BackingFieldField, value) != true)) {
                    this.Namek__BackingFieldField = value;
                    this.RaisePropertyChanged("Namek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<OwnerID>k__BackingField", IsRequired=true)]
        public long OwnerIDk__BackingField {
            get {
                return this.OwnerIDk__BackingFieldField;
            }
            set {
                if ((this.OwnerIDk__BackingFieldField.Equals(value) != true)) {
                    this.OwnerIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("OwnerIDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<OwnerLogin>k__BackingField", IsRequired=true)]
        public string OwnerLogink__BackingField {
            get {
                return this.OwnerLogink__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerLogink__BackingFieldField, value) != true)) {
                    this.OwnerLogink__BackingFieldField = value;
                    this.RaisePropertyChanged("OwnerLogink__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Rathing>k__BackingField", IsRequired=true)]
        public double Rathingk__BackingField {
            get {
                return this.Rathingk__BackingFieldField;
            }
            set {
                if ((this.Rathingk__BackingFieldField.Equals(value) != true)) {
                    this.Rathingk__BackingFieldField = value;
                    this.RaisePropertyChanged("Rathingk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Theme>k__BackingField", IsRequired=true)]
        public string Themek__BackingField {
            get {
                return this.Themek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Themek__BackingFieldField, value) != true)) {
                    this.Themek__BackingFieldField = value;
                    this.RaisePropertyChanged("Themek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<questions>k__BackingField", IsRequired=true)]
        public Client.ClientService.QuestionAnswer[] questionsk__BackingField {
            get {
                return this.questionsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.questionsk__BackingFieldField, value) != true)) {
                    this.questionsk__BackingFieldField = value;
                    this.RaisePropertyChanged("questionsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Client.ClientService.Crossword.ThemeE theme {
            get {
                return this.themeField;
            }
            set {
                if ((this.themeField.Equals(value) != true)) {
                    this.themeField = value;
                    this.RaisePropertyChanged("theme");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Crossword.ThemeE", Namespace="http://schemas.datacontract.org/2004/07/DBService")]
        public enum ThemeE : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Sport = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Animals = 2,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Other = 3,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Auto = 4,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Georaphy = 5,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            History = 6,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Music = 7,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Informatic = 8,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuestionAnswer", Namespace="http://schemas.datacontract.org/2004/07/DBService")]
    [System.SerializableAttribute()]
    public partial class QuestionAnswer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string Answerk__BackingFieldField;
        
        private string Questionk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Answer>k__BackingField", IsRequired=true)]
        public string Answerk__BackingField {
            get {
                return this.Answerk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Answerk__BackingFieldField, value) != true)) {
                    this.Answerk__BackingFieldField = value;
                    this.RaisePropertyChanged("Answerk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Question>k__BackingField", IsRequired=true)]
        public string Questionk__BackingField {
            get {
                return this.Questionk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Questionk__BackingFieldField, value) != true)) {
                    this.Questionk__BackingFieldField = value;
                    this.RaisePropertyChanged("Questionk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilterRequest", Namespace="http://schemas.datacontract.org/2004/07/Client")]
    [System.SerializableAttribute()]
    public partial class FilterRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CrosswordNamek__BackingFieldField;
        
        private int Lengthk__BackingFieldField;
        
        private int Offsetk__BackingFieldField;
        
        private string ThemeIdsk__BackingFieldField;
        
        private long Uidk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CrosswordName>k__BackingField", IsRequired=true)]
        public string CrosswordNamek__BackingField {
            get {
                return this.CrosswordNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.CrosswordNamek__BackingFieldField, value) != true)) {
                    this.CrosswordNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("CrosswordNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Length>k__BackingField", IsRequired=true)]
        public int Lengthk__BackingField {
            get {
                return this.Lengthk__BackingFieldField;
            }
            set {
                if ((this.Lengthk__BackingFieldField.Equals(value) != true)) {
                    this.Lengthk__BackingFieldField = value;
                    this.RaisePropertyChanged("Lengthk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Offset>k__BackingField", IsRequired=true)]
        public int Offsetk__BackingField {
            get {
                return this.Offsetk__BackingFieldField;
            }
            set {
                if ((this.Offsetk__BackingFieldField.Equals(value) != true)) {
                    this.Offsetk__BackingFieldField = value;
                    this.RaisePropertyChanged("Offsetk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ThemeIds>k__BackingField", IsRequired=true)]
        public string ThemeIdsk__BackingField {
            get {
                return this.ThemeIdsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ThemeIdsk__BackingFieldField, value) != true)) {
                    this.ThemeIdsk__BackingFieldField = value;
                    this.RaisePropertyChanged("ThemeIdsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Uid>k__BackingField", IsRequired=true)]
        public long Uidk__BackingField {
            get {
                return this.Uidk__BackingFieldField;
            }
            set {
                if ((this.Uidk__BackingFieldField.Equals(value) != true)) {
                    this.Uidk__BackingFieldField = value;
                    this.RaisePropertyChanged("Uidk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientService.IDBConnection")]
    public interface IDBConnection {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/signUpUser", ReplyAction="http://tempuri.org/IDBConnection/signUpUserResponse")]
        int signUpUser(string name, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/signUpUser", ReplyAction="http://tempuri.org/IDBConnection/signUpUserResponse")]
        System.Threading.Tasks.Task<int> signUpUserAsync(string name, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/SignInUser", ReplyAction="http://tempuri.org/IDBConnection/SignInUserResponse")]
        Client.ClientService.User SignInUser(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/SignInUser", ReplyAction="http://tempuri.org/IDBConnection/SignInUserResponse")]
        System.Threading.Tasks.Task<Client.ClientService.User> SignInUserAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/createCrossword", ReplyAction="http://tempuri.org/IDBConnection/createCrosswordResponse")]
        int createCrossword(Client.ClientService.Crossword cw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/createCrossword", ReplyAction="http://tempuri.org/IDBConnection/createCrosswordResponse")]
        System.Threading.Tasks.Task<int> createCrosswordAsync(Client.ClientService.Crossword cw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/getThemes", ReplyAction="http://tempuri.org/IDBConnection/getThemesResponse")]
        string[] getThemes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/getThemes", ReplyAction="http://tempuri.org/IDBConnection/getThemesResponse")]
        System.Threading.Tasks.Task<string[]> getThemesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/editCrossword", ReplyAction="http://tempuri.org/IDBConnection/editCrosswordResponse")]
        int editCrossword(Client.ClientService.Crossword crossword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/editCrossword", ReplyAction="http://tempuri.org/IDBConnection/editCrosswordResponse")]
        System.Threading.Tasks.Task<int> editCrosswordAsync(Client.ClientService.Crossword crossword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/insertQuestions", ReplyAction="http://tempuri.org/IDBConnection/insertQuestionsResponse")]
        int insertQuestions(Client.ClientService.QuestionAnswer[] items, long owner_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/insertQuestions", ReplyAction="http://tempuri.org/IDBConnection/insertQuestionsResponse")]
        System.Threading.Tasks.Task<int> insertQuestionsAsync(Client.ClientService.QuestionAnswer[] items, long owner_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/getCrosswordQuestions", ReplyAction="http://tempuri.org/IDBConnection/getCrosswordQuestionsResponse")]
        Client.ClientService.QuestionAnswer[] getCrosswordQuestions(long crosswirdID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/getCrosswordQuestions", ReplyAction="http://tempuri.org/IDBConnection/getCrosswordQuestionsResponse")]
        System.Threading.Tasks.Task<Client.ClientService.QuestionAnswer[]> getCrosswordQuestionsAsync(long crosswirdID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/filterCrosswordsByThemeName", ReplyAction="http://tempuri.org/IDBConnection/filterCrosswordsByThemeNameResponse")]
        Client.ClientService.Crossword[] filterCrosswordsByThemeName(Client.ClientService.FilterRequest filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/filterCrosswordsByThemeName", ReplyAction="http://tempuri.org/IDBConnection/filterCrosswordsByThemeNameResponse")]
        System.Threading.Tasks.Task<Client.ClientService.Crossword[]> filterCrosswordsByThemeNameAsync(Client.ClientService.FilterRequest filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/countFilteredCrosswords", ReplyAction="http://tempuri.org/IDBConnection/countFilteredCrosswordsResponse")]
        long countFilteredCrosswords(Client.ClientService.FilterRequest filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/countFilteredCrosswords", ReplyAction="http://tempuri.org/IDBConnection/countFilteredCrosswordsResponse")]
        System.Threading.Tasks.Task<long> countFilteredCrosswordsAsync(Client.ClientService.FilterRequest filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/updateRathing", ReplyAction="http://tempuri.org/IDBConnection/updateRathingResponse")]
        void updateRathing(long crosswordId, int rathing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/updateRathing", ReplyAction="http://tempuri.org/IDBConnection/updateRathingResponse")]
        System.Threading.Tasks.Task updateRathingAsync(long crosswordId, int rathing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/saveCoins", ReplyAction="http://tempuri.org/IDBConnection/saveCoinsResponse")]
        void saveCoins(long uid, int coins);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/saveCoins", ReplyAction="http://tempuri.org/IDBConnection/saveCoinsResponse")]
        System.Threading.Tasks.Task saveCoinsAsync(long uid, int coins);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/deleteCrosswordById", ReplyAction="http://tempuri.org/IDBConnection/deleteCrosswordByIdResponse")]
        void deleteCrosswordById(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBConnection/deleteCrosswordById", ReplyAction="http://tempuri.org/IDBConnection/deleteCrosswordByIdResponse")]
        System.Threading.Tasks.Task deleteCrosswordByIdAsync(long id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBConnectionChannel : Client.ClientService.IDBConnection, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBConnectionClient : System.ServiceModel.ClientBase<Client.ClientService.IDBConnection>, Client.ClientService.IDBConnection {
        
        public DBConnectionClient() {
        }
        
        public DBConnectionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBConnectionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBConnectionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBConnectionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int signUpUser(string name, string login, string password) {
            return base.Channel.signUpUser(name, login, password);
        }
        
        public System.Threading.Tasks.Task<int> signUpUserAsync(string name, string login, string password) {
            return base.Channel.signUpUserAsync(name, login, password);
        }
        
        public Client.ClientService.User SignInUser(string login, string password) {
            return base.Channel.SignInUser(login, password);
        }
        
        public System.Threading.Tasks.Task<Client.ClientService.User> SignInUserAsync(string login, string password) {
            return base.Channel.SignInUserAsync(login, password);
        }
        
        public int createCrossword(Client.ClientService.Crossword cw) {
            return base.Channel.createCrossword(cw);
        }
        
        public System.Threading.Tasks.Task<int> createCrosswordAsync(Client.ClientService.Crossword cw) {
            return base.Channel.createCrosswordAsync(cw);
        }
        
        public string[] getThemes() {
            return base.Channel.getThemes();
        }
        
        public System.Threading.Tasks.Task<string[]> getThemesAsync() {
            return base.Channel.getThemesAsync();
        }
        
        public int editCrossword(Client.ClientService.Crossword crossword) {
            return base.Channel.editCrossword(crossword);
        }
        
        public System.Threading.Tasks.Task<int> editCrosswordAsync(Client.ClientService.Crossword crossword) {
            return base.Channel.editCrosswordAsync(crossword);
        }
        
        public int insertQuestions(Client.ClientService.QuestionAnswer[] items, long owner_id) {
            return base.Channel.insertQuestions(items, owner_id);
        }
        
        public System.Threading.Tasks.Task<int> insertQuestionsAsync(Client.ClientService.QuestionAnswer[] items, long owner_id) {
            return base.Channel.insertQuestionsAsync(items, owner_id);
        }
        
        public Client.ClientService.QuestionAnswer[] getCrosswordQuestions(long crosswirdID) {
            return base.Channel.getCrosswordQuestions(crosswirdID);
        }
        
        public System.Threading.Tasks.Task<Client.ClientService.QuestionAnswer[]> getCrosswordQuestionsAsync(long crosswirdID) {
            return base.Channel.getCrosswordQuestionsAsync(crosswirdID);
        }
        
        public Client.ClientService.Crossword[] filterCrosswordsByThemeName(Client.ClientService.FilterRequest filter) {
            return base.Channel.filterCrosswordsByThemeName(filter);
        }
        
        public System.Threading.Tasks.Task<Client.ClientService.Crossword[]> filterCrosswordsByThemeNameAsync(Client.ClientService.FilterRequest filter) {
            return base.Channel.filterCrosswordsByThemeNameAsync(filter);
        }
        
        public long countFilteredCrosswords(Client.ClientService.FilterRequest filter) {
            return base.Channel.countFilteredCrosswords(filter);
        }
        
        public System.Threading.Tasks.Task<long> countFilteredCrosswordsAsync(Client.ClientService.FilterRequest filter) {
            return base.Channel.countFilteredCrosswordsAsync(filter);
        }
        
        public void updateRathing(long crosswordId, int rathing) {
            base.Channel.updateRathing(crosswordId, rathing);
        }
        
        public System.Threading.Tasks.Task updateRathingAsync(long crosswordId, int rathing) {
            return base.Channel.updateRathingAsync(crosswordId, rathing);
        }
        
        public void saveCoins(long uid, int coins) {
            base.Channel.saveCoins(uid, coins);
        }
        
        public System.Threading.Tasks.Task saveCoinsAsync(long uid, int coins) {
            return base.Channel.saveCoinsAsync(uid, coins);
        }
        
        public void deleteCrosswordById(long id) {
            base.Channel.deleteCrosswordById(id);
        }
        
        public System.Threading.Tasks.Task deleteCrosswordByIdAsync(long id) {
            return base.Channel.deleteCrosswordByIdAsync(id);
        }
    }
}
